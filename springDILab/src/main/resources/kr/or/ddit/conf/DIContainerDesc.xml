<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-lazy-init="false"
	>
	
<!-- 	Spring DI Container(Bean Container, Spring Container) 를 활용하는 단계 -->
<!-- 	1. Spring Bean Configuration File 생성 -->
<!-- 	2. bean 등록 -->
<!-- 		** bean 이란? 스프링이 관리하는 모든 객체를 지칭. -->
<!-- 	3. 등록된 bean들간의 의존관계 형성 (dependency injection) -->
<!-- 	4. 어플리케이션의 엔트리 포인트에서 컨테이너 객체(ApplicationContext) 생성 -->
<!-- 	5. 컨테이너를 통해 필요 객체 주입(getBean) -->

<!-- 	** 등록된 빈들간의 의존관계 형성 방법(Dependency Injection 방법) -->
<!-- 	1. setter Injection : optional 전략 -->
<!-- 		: property 엘리먼트나 p 네임 스페이스로 주입 -->
<!-- 	2. constructor Injection : required 전략 -->
<!-- 		: constructor-arg 엘리먼트나 c 네임스페이스로 주입 -->

<!-- 	스프링 컨테이너의 빈 관리 특성 -->
<!-- 	1. singleton (기본값) : 특별한 설정이 없는 한 하나의 bean 에 대해 하나의 객체만을 생성. -->
<!-- 		- scope 속성 -->
<!-- 				:prototype - bean을 주입할때마다 새로운 객체가 생성. -->
<!-- 				:request/session - 웹 어플리케이션용(requestScope/sessionScope). -->
<!-- 	2. 특별한 설정이 없는 한, 등록된 모든 빈의 객체를 컨테이너가 초기화 될 때 미리 생성. -->
<!-- 		- lazy-init : true로 설정한 경우, 빈이 주입되는 즉 객체가 필요한 시점에 생성되도록 생성 시점을 지연시킨다. -->
<!-- 			기본값인 default를 사용한 경우, beans의 설정을 따른다 -->
<!-- 	3. 객체 생성 순서 제어 :depends-on 설정으로 객체 생성 여부를 확인한 후 현재 객체를 생성하도록 생성 시점을 지연할 수 있다.	 -->
<!-- 	4. 객체의 생명주기 callback 메소드 설정  -->
<!-- 			- init-method : 초기화 콜백 -->
<!-- 			  destory-method : GC 콜백 -->
<!-- 			  	c.f) ConfigurableApplicationContext 와 같은 컨테이너 객체에서 close 이벤트를 발생시켰을 때, -->
<!-- 			  	등록된 빈들이 일시에 소멸됨 -->

<!-- 	** 스프링을 이용한 리소스 확보 -->
<!-- 		prefix를 통해 리소스(Resource)를 검색하는 Smart ResourceLoader가 컨테이너 내부에 있음. -->
<!-- 	1. classpath : 클래스패스 리소스 로딩 (ClasspathResource) -->
<!-- 	2. file : 파일시스템 리소스 로딩 (FileSystemResource) -->
<!-- 	3. url : 웹리소스 로딩 (ServletContextResource) -->

<!-- 	** 스프링 컨테이너 구현체 -->
<!-- 	1. ClassPathXmlApplicationContext -->
<!-- 		: 빈 메타 데이터 등록 파일이 xml 형식이고, classpath 아래에 위치함. -->
<!-- 	2. GenerixXmlApplicationContext -->
<!-- 		: 빈 메타 데이터 등록 파일의 위치가 runtime 에 동적으로 설정될 수 있음. -->
<!-- 		(classpath, file, url 등의 접두어 활용.) -->

	<bean id="sampleDAOFactory" class="kr.or.ddit.dao.SampleDAOFactory"/>
	
	<bean id="mysqlDAO" factory-bean="sampleDAOFactory" factory-method="getSampleDAO"/>

	<bean id="sampleOracleDAO" class="kr.or.ddit.dao.SampleOracleDAO" 
		scope="singleton"
		lazy-init="default"
		depends-on="sampleMysqlDAO"
		init-method="init"
		destroy-method="destroy" 
		
	/>
	
	<bean id="sampleMysqlDAO" class="kr.or.ddit.dao.SampleMySqlDAO"/>
	
	<bean id="sampleService1" class="kr.or.ddit.service.SampleService"
		c:sampleDAO-ref="sampleOracleDAO"
		lazy-init="default"
	>
<!-- 		<constructor-arg name="sampleDAO" ref="sampleOracleDAO" /> -->
<!-- 			<bean class="kr.or.ddit.dao.SampleOracleDAO"/> -->
<!-- 		</constructor-arg> -->
	</bean>
	<bean id="sampleService2" class="kr.or.ddit.service.SampleService" 
		p:sampleDAO-ref="sampleMysqlDAO"
	/>

</beans>
