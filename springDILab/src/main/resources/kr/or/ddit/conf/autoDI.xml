<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 	스키마 종류 : beans, c, p, context -->
<!-- 	** 특정 패키지내에 일정 조건을 만족하는 클래스들을 bean으로 자동 등록하는 방법. -->
<!-- 	현재 컨테이너내에서 어노테이션을 통해 bean을 등록하거나 의존관계를 형성할 수 있도록, -->
<!-- 	BeanPostProcessor 들이 자동 등록됨. -->
<!-- 	<context:annotation-config /> -->
	
<!-- 	base-package 아래에서 다음 어노테이션들을 사용하고 있는 클래스들을 bean으로 등록한다. -->
<!-- 	@Component, @Repository, @Service, @Controller, @Configuration : 3.x 이하 -->
<!-- 	1. 빈을 자동 등록하는 어노테이션 -->
<!-- 	@Component : 공통 컴포넌트를 빈으로 등록할때 사용함. -->
<!-- 	@Repository : Persistence Layer -->
<!-- 	@Service : Business Logic Layer -->
<!-- 	@Controller : bean 자동 등록, HandlerMapping에 의해 Command handler로 수집됨. -->
<!-- 	@Configuration(3.2에서 추가) : Java Config 방식을 이용한 빈 관리. -->
<!-- 	@ControllerAdvice, @RestController : 4.x 이상 -->

<!-- 	2. 등록된 빈들간의 관계 설정에 사용 -->
<!-- 	@Required : setter Inject 에서 사용되고, 해당 setter 가 반드시 호출되어야 함을 제한할때. -->
<!-- 	@AutoWired(required) : type을 기준으로 주입할때 사용되는 조건. -->
<!-- 	@Inject == @AutoWired(required=true), type을 기준으로 주입 -->
<!-- 	@Resource : 주입시 선별 기준을 명시적으로 설정 가능(ex. name, type..) -->
	
	
	<context:component-scan base-package="kr.or.ddit" use-default-filters="true"></context:component-scan>

</beans>
